// <auto-generated />
using System;
using Magazine.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Magazine.DataAccess.Migrations
{
    [DbContext(typeof(EfDbContext))]
    partial class EfDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Magazine.Core.Domain.Administration.RewardMagazineOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MagazineOwnerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.ToTable("MagazineOwners");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Magazines.RewardMagazine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MagazineId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("MagazineOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("numeric");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MagazineOwnerId");

                    b.ToTable("Magazines");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Magazines.RewardMagazineLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MagazineLineId");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EventDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("MagazineId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RewardId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MagazineId");

                    b.ToTable("MagazineLine");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Magazines.RewardMagazine", b =>
                {
                    b.HasOne("Magazine.Core.Domain.Administration.RewardMagazineOwner", "MagazineOwner")
                        .WithMany("Magazines")
                        .HasForeignKey("MagazineOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MagazineOwner");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Magazines.RewardMagazineLine", b =>
                {
                    b.HasOne("Magazine.Core.Domain.Magazines.RewardMagazine", "Magazine")
                        .WithMany("Lines")
                        .HasForeignKey("MagazineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Magazine");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Administration.RewardMagazineOwner", b =>
                {
                    b.Navigation("Magazines");
                });

            modelBuilder.Entity("Magazine.Core.Domain.Magazines.RewardMagazine", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
